# -*- coding: utf-8 -*-
"""gbm_1d_class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v-meNhqZG96Cl8cvXfs7wdLn0X6DNgh1
"""

import numpy as np
import scipy.stats as ss

#!git clone https://github.com/TALeonard/19ma573thomasleonard.git #Only run once!

#cd /content/19ma573thomasleonard/src/

from european_options_class import VanillaOption

class Gbm:
    def __init__(self,
                 init_state = 100.,
                 drift_ratio = .0475,
                 vol_ratio = .2
                ):
        self.init_state = init_state
        self.drift_ratio = drift_ratio
        self.vol_ratio = vol_ratio

"""BSM formula is given by a method of Gbm class with an input of an option."""

'''========
Black-Scholes-Merton formula. 
=========='''

def bsm_price(self, european_option):
    s0 = self.init_state
    sigma = self.vol_ratio
    r = self.drift_ratio
    
    otype = european_option.otype
    k = european_option.strike
    maturity = european_option.maturity
    
    d1 = (np.log(s0 / k) + (r + 0.5 * sigma ** 2) 
          * maturity) / (sigma * np.sqrt(maturity))
    d2 = d1 - sigma * np.sqrt(maturity)
    
    return (otype * s0 * ss.norm.cdf(otype * d1) #line break needs parenthesis
            - otype * np.exp(-r * maturity) * k * ss.norm.cdf(otype * d2))

Gbm.bsm_price = bsm_price

'''==============
output: BSM geometric asian option price
==============='''

def bsm_geometric_asian_price(self,
                             otype = 1,
                             strike = 110,
                             maturity = 1,
                             num_step = 4 #partition number
                             ):
  s0 = self.init_state
  sigma = self.vol_ratio
  r = self.drift_ratio
  n = num_step
  
  #NOTE: This price assumes a uniform partition time steps, for ease of coding.
 
  #Compute mu-hat
  #mu-hat = mu/2 (we are assuming uniform partition as stated above)
  mu = r - 0.5*(sigma**2)
  mu_hat = (mu/2)
  
  #Compute sigma-hat
  #Sigma-hat^2 = (sigma^2 * (2m + 1))/(6*(m+1)) where m is the number of steps.
  #Recall that the vol_ratio is sigma, not sigma^2. Thus we need both.
  sigma_hat_squared = ((sigma**2)*((2*n) + 1))/(6*(n+1))
  sigma_hat = sigma_hat_squared ** 0.5
  
  #With mu-hat and sigma-hat calculated, we can find r-hat.
  r_hat = mu_hat + (0.5 * sigma_hat_squared)
  
  #Create a separate GBM variable to store the new sigma and r, for the sake of
  #computing the price.
  
  gao_internal_gbm = Gbm(init_state=s0,drift_ratio = r_hat,vol_ratio = sigma_hat)
  
  return np.exp((r_hat - r)*maturity) * gao_internal_gbm.bsm_price(VanillaOption(otype,strike,maturity))

Gbm.bsm_geometric_asian_price = bsm_geometric_asian_price
